test.cpp
#include<stdio.h>
#include"game.h"
 
void game()
{
    int ret = 0;
    //数组存放要走的棋盘信息
    char board[ROW][COL] = {0};
    //初始化棋盘,全部空格；
    InitBoard(board,ROW,COL);
    //打印棋盘
    DisplayBoard(board,ROW,COL);
    //下棋
    while(1)
    {
        //玩家下棋
        playmove(board,ROW,COL);
        DisplayBoard(board,ROW,COL);
        //判断玩家是否赢
        ret = iswin(board,ROW,COL);
        if(ret != 'C')
        {
            break;
        }
        //电脑下棋
        computermove(board,ROW,COL);
        DisplayBoard(board,ROW,COL);
        //判断电脑是否赢
        ret = iswin(board,ROW,COL);
        if(ret != 'C')
        {
            break;
        }
    }
    if(ret == '*')
    {
        printf("玩家赢\n");
    }
    else if (ret == '#')
    {
        printf("电脑赢\n");
    }
    else
    {
        printf("平局\n");
    }
}
void menu()
{
    printf("********************\n");
    printf("***1:play**0:exit***\n");
    printf("********************\n");
}
void menu1()
{
    printf("********************\n");
    printf("***1:确认***0:取消***\n");
    printf("********************\n");
}
void test()
{
    int a = 0;
    int b = 0;
    srand((unsigned int)time(NULL));
    again:
    do
    {
        menu();
        printf("请选择：");
        scanf("%d",&a);
        switch(a)
        {
        case 1:
            game();break;
        case 0:
             printf("退出游戏？\n");break;
        default:
            printf("选择错误，请重新选择\n");break;
        }
//        if(a==1)
//        {
//            printf("三子棋\n");
//        }
//        else if(0==a)
//        {
//            printf("退出游戏\n");
//        }
//        else
//        {
//            printf("选择错误，请重新选择\n");
//       }
    }
    while(a);
//确定是否退出，意义不大。
    do
    {
    menu1();
    scanf("%d",&b);
    if(1==b)
    {
     printf("退出游戏\n");
     break;
    }
    else if(0==b)
    {
        goto again;
   }
    else
    {
        printf("选择错误，请重新选择\n");
    }
    }
    while(b);
}
int main()
{
    test();
    return 0;
}
 
game.cpp 
 #include "game.h"
void InitBoard(char board[ROW][COL],int row,int col)
{
    int i = 0;
    int j = 0;
    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
        {
            board[i][j] = ' ';
        }
    }
}
void DisplayBoard(char board[ROW][COL],int row,int col)
{
    int i = 0;
    int j = 0;
    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
        {
            printf(" %c ",board[i][j]);
            if(j<row-1)
                printf("|");
        }
        printf("\n");
        if(i<row-1)
        {
            for(j=0;j<col;j++)
            {
                printf("---");
                if(j<col-1)
                printf("|");
            }
            printf("\n");
        }
    }
}
void playmove(char board[ROW][COL],int row,int col)
{
    int x = 0;
    int y = 0;
    printf("玩家走：\n");
    while(1)
    {
        printf("请输入要下的坐标：>");
        scanf("%d%d",&x,&y);
        if (x >= 1 && x<= row && y>=1 && y<=col)
        {
            if(board[x-1][y-1] == ' ')
            {
                board[x-1][y-1] = '*';
                break;
            }
            else
            {
                printf("该坐标被占用\n");
            }
        }
        else
        {
            printf("坐标非法，请重新输入：\n");
        }
    }
}
void computermove(char board[ROW][COL],int row,int col)
{
    int x = 0;
    int y = 0;
    printf("电脑走：>\n");
    while(1)
    {
        x = rand()%row;
        y = rand()%col;
        if(board[x][y] == ' ')
        {
           board[x][y] = '#';
           break;
        }
    }
}
//返回1表示棋盘满了
//返回0表示棋盘没满
int isfull(char board[ROW][COL],int row,int col)
{
    int i = 0;
    int j = 0;
    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
        {
            if(board[i][j] == ' ')
            {
                return 0;
                break;
            }
        }
    }
    return 1;
}
char iswin(char board[ROW][COL],int row,int col)
{
    int i = 0;
    //横三行
    for (i=0;i<row;i++)
    {
        if(board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] !=' ')
        {
            return board[i][1];
        }
    }
    //竖三列
    for(i=0;i<col;i++)
    {
        if(board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] !=' ')
        {
            return board[1][i];
        }
    }
    //两个对角线
    if(board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
        return board[1][1];
    if(board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ')
        return board[1][1];
    if(i==isfull(board,row,col))
    {
        return 'Q';
    }
    return 'C';
}

game.h
#define ROW  3
#define COL  3
//函数声明
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void InitBoard(char board[ROW][COL],int row,int col);
void DisplayBoard(char board[ROW][COL],int row,int col);
void playmove(char board[ROW][COL],int row,int col);
void computermove(char board[ROW][COL],int row,int col);
 
//告诉我们四种游戏的状态
//玩家赢-'*'
//电脑赢-'#'
//平局-'Q'
//继续-'C'
char iswin(char board[ROW][COL],int row,int col);
